@name TestKit
#Windows 10.4 update 0

if(app("APITest")){ #Cost 5 egpID.
    
    local Size = appV2("Size")
    if(appCreate()){print("Now you open APITest! If you want see samples of API - welcome.")}
    appEgpMemory(44)
    if(appGraphics(App_Size_Default,ROM["System",table]["Theme",vector]*0.9)){
        Size = appV2("Size")
    }else{
    if(romCreate()){romS("WriteTest","Success!")}
    if(appChoiceMenu(1,vec2(-150,-61),ROM["System",table]["Theme",vector]*0.5,"Activity",array("Buttons","Arrays","Texts","Slider","Activity1","Activities"))){print(appS("Activity"))} #Cost 3 egpID.
    switch(activityManager(4)){
        case "Buttons",
            if(activityGraphics()){
                appBox(4,vec2(150-25,50),vec2(40,40),vec(128)) #Cost 1 egpID.
                appTextWhite(5,4,"Gray",vec2(0,-12),8,1) #Cost 1 egpID.
                appTextBlack(6,4,"Box",vec2(0,4),8,1) }else{ #Cost 1 egpID.
            
            if(egpInrange(egp(4))){Screen:egpColor(egp(4),vec(200)) if(App_Click){print("You use API ",API_Version)}}else{Screen:egpColor(egp(4),vec(128))}
            if(appButton(7,"Notify",      vec2(-25,-50),vec2(80,15),hsv2rgb( 60,1,0.9))){App_Dialog="APITest App_Dialog 1"} #Cost 3 egpID.
            if(appButton(10,"Action",     vec2(-25,-30),vec2(80,15),hsv2rgb(120,1,0.9))){App_Dialog="APITest App_Dialog 2"} #Cost 3 egpID.
            if(appButton(13,"Input",      vec2(-25,-10),vec2(80,15),hsv2rgb(180,1,0.9))){App_Dialog="APITest App_Dialog 3"} #Cost 3 egpID.
            if(appButton(16,"BigNotify",  vec2(-25, 10),vec2(80,15),hsv2rgb(240,1,0.9))){App_Dialog="APITest App_Dialog 4"} #Cost 3 egpID.
            if(appButton(19,"FieldNotify",vec2(-25, 30),vec2(80,15),hsv2rgb(300,1,0.9))){App_Dialog="APITest App_Dialog 5"} #Cost 3 egpID.
            if(appButton(41,"Choose",     vec2(-25, 50),vec2(80,15),hsv2rgb(360,1,0.9))){App_Dialog="APITest App_Dialog 6"} #Cost 3 egpID.
            if(appTextFieldString(22,"StringField",vec2(55,-50),60)){print(appS("StringField"))} #Cost 3 egpID.
            if(appTextFieldNumber(25,"NumberField",vec2(55,-30),60)){print(appN("NumberField"))} #Cost 3 egpID.
            if(appButtonHold(28,"Button",vec2(55,-10),vec2(60,15))){print("ButtonWork!")} #Cost 3 egpID.
            if(appButton(31,"Click",vec2(55,10),vec2(60,15))){print("ButtonWork!")} #Cost 3 egpID.
            if(appButtonToggle(34,"Switcher",vec2(55,30),vec2(60,15),array("Switch1","Switch2","Switch3","Switch4"))){print("Switcher return "+appN("Switcher"))} #Cost 3 egpID.
            if(appCheckBox(37,"CheckBox","Check",vec2(25,45))){if(appN("CheckBox")){print("Checked!")}else{print("Not checked!")}} #Cost 4 egpID.
        } break
        case "Arrays",
            if(activityCreate()){
                local Array = array()
                for(I=1,15){Array[I,string]="String"+I}
                appR("ArrayFieldIn",Array)
            }
            
            appArrayField(4,"ArrayField",vec2(-15,4),vec2(110,130),appR("ArrayFieldIn")) #Cost 5 egpID
            appArrayFieldUseCTM(9,"ArrayFieldUseCTM",vec2(95,4),vec2(110,130),appR("ArrayFieldIn"),array("Action1","Action2")) #Cost 6 egpID
            
			local ContextMenuAnswear = appContextMenuAnswear("ArrayFieldUseCTM")
            switch(ContextMenuAnswear){
                case "Action1", print("Action1 "+appR("ArrayFieldIn")[appN("ArrayFieldUseCTM"),string]) break #Action1
                case "Action2", print("Action2 "+appR("ArrayFieldIn")[appN("ArrayFieldUseCTM"),string]) break #Action2
            }
        break
        case "Texts",
            if(activityGraphics()){
                appTextUni(4,("This is a long text function (appTextUni). If you have long text - use shortArray(230/egpTextSizeX(10)). You can use this for arrays and strings. "+ #Cost 1 EGPID
                "If you want to make simple text, you can use appTextWhite, appTextBlack and appTextUni. Uni - universal color."):shortArray(230/egpTextSizeX(8)),vec2(-150+85,-60),8) 
            }
            
            #Actions of Texts page. Here place is empty, because this page have static text, and do nothink.
        break
        case "Slider",
            if(activityGraphics()){
                appTextUni(4,"Static",vec2(-30,-60),10,1)
                appTextUni(5,"Dynamic",vec2(60,-60),10,1)
                appBox(6,vec2(-30,-20),vec2(40),vec(appN("Slider1")))
                appBox(7,vec2( 60,-20),vec2(40),vec(appN("Slider2")))
            }
            if(appSliderStatic(  8,"Slider1",vec2(-60,10),50,0,255)){Screen:egpColor(egp(6),vec(appN("Slider1")))}
            if(appSliderDynamic(11,"Slider2",vec2( 30,10),50,0,255)){Screen:egpColor(egp(7),vec(appN("Slider2")))}
            if(App_Click){
                if(egpInrange(egp(6))){appN("Slider1",0) Screen:egpColor(egp(6),vec())}
                if(egpInrange(egp(7))){appN("Slider2",0) Screen:egpColor(egp(7),vec())}
            }
        break
        case "Activity1",
            if(activityGraphics()){
                appTextUni(4,"This is Activity1",vec2(40,-20),10,1)
            }else{
            if(appButton(5,"Go to Activity2",vec2(40,0),vec2(100,15))){appS("Activity","Activity2")} #Cost 3 egpID.
            
        } break
        case "Activity2",
            if(activityGraphics()){
                appTextUni(4,array("This is Activity2"):add("This is a new method - activities. Try this method on programming!":shortArray(230/egpTextSizeX(10))),vec2(-60,-55))
                appN("CheckTested",romN("Tested"))
            }else{
            if(appButton(5,"Go back",vec2(-25,30),vec2(80,15))){appS("Activity","Activity1")} #Cost 3 egpID.
            if(appCheckBox(8,"CheckTested","I've tested new OS!",vec2(85-150,45))){romN("Tested",appN("CheckTested"))} #Cost 4 egpID.
            
        } break
        case "Activities",
            if(activityCreate()){
                print("activityCreate() of main activity manager")
            }
            appChoiceMenu(4,vec2(-70,-61),ROM["System",table]["Theme",vector]*0.5,"ActivityManager2",array("Activity1","Activity2","Activity3"))
            if(activityManager("ActivityManager2",7,10)){switch(appS("ActivityManager2")){
                case "Activity1",
                if(activityCreate("ActivityManager2")){
                    print("activityCreate() of second activity manager. Now you launch Activity1")
                }
                if(activityGraphics("ActivityManager2")){
                    appBox(7,vec2(80,0),vec2(50),vec(150,50,50))
                }
                break
                case "Activity2",
                if(activityCreate("ActivityManager2")){
                    print("activityCreate() of second activity manager. Now you launch Activity2")
                }
                if(activityGraphics("ActivityManager2")){
                    appTextUni(7,"Opcounter: "+appN("Opcounter"),vec2(10,-50))
                }
                Screen:egpSetText(egp(7),"Opcounter: "+appN("Opcounter"))
                break
                case "Activity3",
                if(activityCreate("ActivityManager2")){
                    print("activityCreate() of second activity manager. Now you launch Activity2")
                }
                if(activityGraphics("ActivityManager2")){
                    appTextUni(7,"Ops use: "+ops(),vec2(10,-50))
                }
                Screen:egpSetText(egp(7),"Ops use: "+ops())
                break
            }}
        break
        
    }
    
    if(appCloseTry(1)){
        App_Dialog = "APITest Exit"
    }
    
    if(App_Dialog){
        if(appDialog("APITest App_Dialog 1","Notify",10,"I'm a dialog app!")){print("Action after press OK button")}
        if(appDialog("APITest App_Dialog 2","Action",10,"I'm a dialog app!")){print("Action of dialog app!")}
        if(appDialog("APITest App_Dialog 3","Input", 10,"I'm a dialog app!")){print(glbS("#AppDialog","OutText"))}
           appDialog("APITest App_Dialog 4","BigNotify",  10,"I'm a big dialog app! This is a big notification! If you have long message, you can use this method! If you want use array, you need concat(\"\n\") method or something same.")
           appDialog("APITest App_Dialog 5","FieldNotify",40,"I'm a big dialog app! This is a big notification! If you have long message, you can use this method! If you want use array, you need concat(\"\n\") method or something same.")
        if(appDialog("APITest App_Dialog 6","Choose",40,array("Choice1","Choice2","Choice3","Choice4"):concat("\n"))){print(glbS("#AppDialog","OutText"))}
        
        if(appDialog("APITest Exit","Action",8,"Do you want to exit app?")){
            appN("APITest Close", 1)
        }
    }
    elseif(appN("APITest Close")){
        App_Close = "APITest"
    }
}}



if(app("PerfTest")){
    if(appCreate()){
        appN("Threads", 1)
    }
    
    appEgpMemory(13)
    if(appGraphics(vec2(200,150),vec(180,80,180))){
        appTextWhite(1,"Test your PC!",vec2(-90,-60))
        appTextWhite(2,"Ops: "+ops(),vec2(-90,-50))
        appTextWhite(3,array(
            "Maximum of",
            "    EGPIDs: "+egpMaxObjects(),
            "    Umsg/sec: "+egpMaxUmsgPerSecond(),
            "Quota",
            "    Hard: "+hardQuota(),
            "    Soft: "+softQuota(),
            "    Max: "+maxquota(),
            "    Min: "+minquota()), vec2(-90,-20))
    }else{
    appSliderStatic(4,"Perf",vec2(-90,-35),100,0,100)
    appSliderStatic(7,"Threads",vec2(-90,-25),100,1,Threads_Max)
    appButtonToggle(10,"Start",vec2(70,60),vec2(40,15),array("Start","Stop"))
    Screen:egpSetText(EGP+2,"Ops: "+ops())
    Screen:egpSetText(EGP+1, appN("Start") ? "Speed: "+ appN("Speed") +" Op/Tick" : "Test your PC!")
    appN("Speed", 0)
}}



if(App_This == "PerfTest"){
    for(I = 1, appN("Threads")){
        if(appThread("PerfTest")){
            if(appN("Start")){
                local Perf = appN("Perf")
                local Speed = 0
                if(Perf == 100){ 
                    while(perf()){Speed++}
                }else{
                    while(perf(Perf)){Speed++}
                }
                appN("Speed", appN("Speed") + Speed)
            }
        }
    }
}



if(app("TableCMD")){
    if(appCreate()){
        romCreate() appV2("Size",App_Size_Default)
        appN("LevelL",0) appN("LevelR",0)
         local Table=table()
            #Table["ROM",table]=ROM["Apps",table]
            Table["ROM",table]=ROM["Apps",table]
            Table["RAM",table]=App
            Table["System",table]=ROM["System",table]
            Table["My files",table]=ROM["Apps",table][App_This,table]
        appT("FieldL"+appN("LvlL"),Table) appT("FieldR"+appN("LvlR"),Table)
        
        appR("FieldLShow",appT("FieldL"+appN("LvlL")):tableCMDtoStringArray(appV2("Size"):x()/2/egpTextSizeX(10)))
        appR("FieldRShow",appT("FieldR"+appN("LvlR")):tableCMDtoStringArray(appV2("Size"):x()/2/egpTextSizeX(10)))
    }else{
    appEgpMemory(25)
    if(appGraphics(App_Size_Default,vec(90,90,180))){
        
        local Size=appV2("Size")
        Screen:egpSetText(EGP-1,"TableCommander")
        Screen:egpLineStrip(EGP+13,
            vec2(Size:x()/2-Size:x()*1/7,Size:y()/2-14),
            vec2(Size:x()/2-Size:x()*1/7,Size:y()/2),
            vec2(Size:x()/2-Size:x()*2/7,Size:y()/2),
            vec2(Size:x()/2-Size:x()*2/7,Size:y()/2-14),
            vec2(Size:x()/2-Size:x()*3/7,Size:y()/2-14),
            vec2(Size:x()/2-Size:x()*3/7,Size:y()/2),
            vec2(Size:x()/2-Size:x()*4/7,Size:y()/2),
            vec2(Size:x()/2-Size:x()*4/7,Size:y()/2-14),
            vec2(Size:x()/2-Size:x()*5/7,Size:y()/2-14),
            vec2(Size:x()/2-Size:x()*5/7,Size:y()/2),
            vec2(Size:x()/2-Size:x()*6/7,Size:y()/2),
            vec2(Size:x()/2-Size:x()*6/7,Size:y()/2-14),
            vec2(-Size:x()/2,Size:y()/2-14),
            vec2(-Size:x()/2,Size:y()/2),
            vec2(Size:x()/2,Size:y()/2),
            vec2(Size:x()/2,Size:y()/2-14),
            vec2(-Size:x()/2,Size:y()/2-14)
        )
        Screen:egpColor(EGP+13,vec(180,80,180)*0.7) Screen:egpSize(egp(13),2) Screen:egpParent(egp(13),EGP)
        appBox(14,vec2(),vec2(Size:x()/7,15),vec(180,80,180)*0.7) Screen:egpAlpha(egp(14),0)
        appN("Pick",0)
        for(I=0,6){
            appTextWhite(15+I,select(I+1,"Add","Edit","Pick","Move","Copy","Delete","Rename"),vec2(Size:x()*(I+0.5)/7-Size:x()/2,Size:y()/2-15*0.75),7.5,1)
        }
    }else{
    
    appChat()
    
    
    
    if(appSize(22,vec2(200,100),App_Size_Default)){
        local Size=appV2("Size")
        Screen:egpRemove(EGP+2) Screen:egpRemove(EGP+2+2)
        Screen:egpRemove(EGP+7) Screen:egpRemove(EGP+7+2)
        appN("Pick",0)
        for(I=0,6){
            Screen:egpPos(egp(15+I),vec2(Size:x()*(I+0.5)/7-Size:x()/2,Size:y()/2-15*0.75))
        }
        
        Screen:egpLineStrip(egp(13),
            vec2(Size:x()/2-Size:x()*1/7,Size:y()/2-14),
            vec2(Size:x()/2-Size:x()*1/7,Size:y()/2),
            vec2(Size:x()/2-Size:x()*2/7,Size:y()/2),
            vec2(Size:x()/2-Size:x()*2/7,Size:y()/2-14),
            vec2(Size:x()/2-Size:x()*3/7,Size:y()/2-14),
            vec2(Size:x()/2-Size:x()*3/7,Size:y()/2),
            vec2(Size:x()/2-Size:x()*4/7,Size:y()/2),
            vec2(Size:x()/2-Size:x()*4/7,Size:y()/2-14),
            vec2(Size:x()/2-Size:x()*5/7,Size:y()/2-14),
            vec2(Size:x()/2-Size:x()*5/7,Size:y()/2),
            vec2(Size:x()/2-Size:x()*6/7,Size:y()/2),
            vec2(Size:x()/2-Size:x()*6/7,Size:y()/2-14),
            vec2(-Size:x()/2,Size:y()/2-14),
            vec2(-Size:x()/2,Size:y()/2),
            vec2(Size:x()/2,Size:y()/2),
            vec2(Size:x()/2,Size:y()/2-14),
            vec2(-Size:x()/2,Size:y()/2-14)
        )
    }
    
    if(appTimer(1000)){Update="TableCMD FieldL"}
    if(appTimer(1000)){Update="TableCMD FieldR"}
    
    local Size=appV2("Size")
    
    if(Update=="TableCMD FieldL"){
        appR("FieldLShow",appT("FieldL"+appN("LvlL")):tableCMDtoStringArray(Size:x()/2/egpTextSizeX(10)))
    }
    
    if(Update=="TableCMD FieldR"){
        appR("FieldRShow",appT("FieldR"+appN("LvlR")):tableCMDtoStringArray(Size:x()/2/egpTextSizeX(10)))
    }
    
    appArrayFieldUse(2,"FieldL",Size*vec2(-0.25,0),Size*vec2(0.5,1)-vec2(0,30),array("<Back"):add(appR("FieldLShow")))
    
    appArrayFieldUse(7,"FieldR",Size*vec2(0.25,0),Size*vec2(0.5,1)-vec2(0,30),array("<Back"):add(appR("FieldRShow")))
    
    if(App_Click){
        if(egpInrange(EGP+2)){appS("Focus","L") Screen:egpAlpha(EGP+7+4,0)}
        if(egpInrange(EGP+7)){appS("Focus","R") Screen:egpAlpha(EGP+2+4,0)}
        
        local F=appS("Focus")
        local Lvl=appN("Lvl"+F)
        
        local Choice=appT("Field"+F+Lvl):keys()[appN("Field"+F)-1,string]
        if(!appN("Pick")&appT("Field"+F+Lvl):typeids()[Choice,string]=="t"){
            appT("Field"+F+(Lvl+1):toString(),appT("Field"+F+Lvl)[Choice,table])
            appN("Lvl"+F,Lvl+1) 
            
            appN("Field"+F,0)
            Screen:egpAlpha(EGP+2+4,0)
            Screen:egpAlpha(EGP+7+4,0)
            Update="TableCMD Field"+F
        }
        
        elseif(appN("Field"+F)==1&Lvl>0){
            appN("Lvl"+F,Lvl-1) 
            
            appN("Field"+F,0)
            Screen:egpAlpha(EGP+2+4,0)
            Screen:egpAlpha(EGP+7+4,0)
            Update="TableCMD Field"+F
        }
    }
    
    local F=appS("Focus")
    local Lvl=appN("Lvl"+F)
    local Choice=appT("Field"+F+Lvl):keys()[appN("Field"+F)-1,string]
    
    local InrangeStart=vec2(-Size:x()/2,Size:y()/2-15)
    if(appEgpInrange(InrangeStart,Size/2)){
        local ChoiceButton = clamp(appChoiceHelper(InrangeStart,Size:x()/7):x(),0,6)
        if(App_Click){switch(ChoiceButton){
            case 0, App_Dialog="TableCMD Add" break
            case 1, App_Dialog="TableCMD Edit" break
            case 2, 
                Screen:egpSetText(egp(17),select(!appN("Pick")+1,"Pick","Cancel"))
                appN("Pick",!appN("Pick"))
                appN("Field"+F,0)
                Screen:egpAlpha(EGP+2+4,0)
                Screen:egpAlpha(EGP+7+4,0)
            break
            case 3, 
                local F2="U" if(F=="L"){F2="R"}elseif(F=="R"){F2="L"}
                local Lvl2=appN("Lvl"+F2)
                local Target=appT("Field"+F2+Lvl2)
                switch(appT("Field"+F+Lvl):typeids()[Choice,string]){
                    case "n", Target[Choice,number] = appT("Field"+F+Lvl)[Choice,number] break
                    case "s", Target[Choice,string] = appT("Field"+F+Lvl)[Choice,string] break
                    case "v", Target[Choice,vector] = appT("Field"+F+Lvl)[Choice,vector] break
                    case "xv2", Target[Choice,vector2] = appT("Field"+F+Lvl)[Choice,vector2] break
                    case "xv4", Target[Choice,vector4] = appT("Field"+F+Lvl)[Choice,vector4] break
                    case "e", Target[Choice,entity]= appT("Field"+F+Lvl)[Choice,entity] break
                    case "a", Target[Choice,angle] = appT("Field"+F+Lvl)[Choice,angle] break
                    case "r", Target[Choice,array] = appT("Field"+F+Lvl)[Choice,array] break
                    case "t", Target[Choice,table] = appT("Field"+F+Lvl)[Choice,table] break
                    default, App_Dialog="TableCMD Can't move" break
                }
                appT("Field"+F+Lvl):remove(Choice)
            break
            case 4,
                local F2="U" if(F=="L"){F2="R"}elseif(F=="R"){F2="L"}
                local Lvl2=appN("Lvl"+F2)
                local Target=appT("Field"+F2+Lvl2)
                switch(appT("Field"+F+Lvl):typeids()[Choice,string]){
                    case "n", Target[Choice,number] = appT("Field"+F+Lvl)[Choice,number] break
                    case "s", Target[Choice,string] = appT("Field"+F+Lvl)[Choice,string] break
                    case "v", Target[Choice,vector] = appT("Field"+F+Lvl)[Choice,vector] break
                    case "xv2", Target[Choice,vector2] = appT("Field"+F+Lvl)[Choice,vector2] break
                    case "xv4", Target[Choice,vector4] = appT("Field"+F+Lvl)[Choice,vector4] break
                    case "e", Target[Choice,entity]= appT("Field"+F+Lvl)[Choice,entity] break
                    case "a", Target[Choice,angle] = appT("Field"+F+Lvl)[Choice,angle] break
                    case "r", Target[Choice,array] = appT("Field"+F+Lvl)[Choice,array]:clone() break
                    case "t", Target[Choice,table] = appT("Field"+F+Lvl)[Choice,table]:clone() break
                    default, App_Dialog="TableCMD Can't copy" break
                }
            break
            case 5, appT("Field"+F+Lvl):remove(Choice) Update="TableCMD FieldL" break
            case 6, App_Dialog="TableCMD Rename" break
        }}
        Screen:egpBox(egp(14),InrangeStart+vec2(Size:x()/7*(ChoiceButton+0.5),7.5),vec2(Size:x()/7,15)) 
        Screen:egpAlpha(egp(14),255)
    }else{Screen:egpAlpha(egp(14),0)}
    
    if(appDialog("TableCMD Add","Choose",60,array("number","string","vector","vector2","vector4","entity","angle","table","numberArray","stringArray"):concat("\n"))){
        appS("Type",glbS("#AppDialog","OutText"))
        appN("TableCMDAdd2",1)
    }elseif(appN("TableCMDAdd2")){
        App_Dialog="TableCMD Add2"
        appN("TableCMDAdd2",0)
    }
    
    if(appDialog("TableCMD Add2","Input",10,"Enter name:")){
        appS("Name",glbS("#AppDialog","OutText"))
        appN("TableCMDAdd3",1)
    }elseif(appN("TableCMDAdd3")){
        App_Dialog="TableCMD Add3"
        appN("TableCMDAdd3",0)
    }
    
    if(appDialog("TableCMD Edit","Choose",60,array("number","string","vector","vector2","vector4","entity","angle","table","numberArray","stringArray"):concat("\n"))){
        appS("Type",glbS("#AppDialog","OutText"))
        appS("Name",Choice)
        appN("TableCMDEdit",1)
        if(appS("Type")=="numberArray"|appS("Type")=="stringArray"){Sys_Text=appT("Field"+F+Lvl)[appS("Name"),array]:concat(",")}
    }elseif(appN("TableCMDEdit")){
        App_Dialog="TableCMD Add3"
        appN("TableCMDEdit",0)
    }
    
    if(App_Dialog){
        appDialog("TableCMD Can't copy","Notify",10,"Can't copy value.")
        appDialog("TableCMD Can't move","Notify",10,"Can't move value.")
        appDialog("TableCMD Can't rename","Notify",10,"Can't rename value.")
        
        if(appDialog("TableCMD Add3","Input",8,"Enter data: (Use ',' for explode)")){
            local Paste=appT("Field"+F+Lvl)
            local Explode=glbS("#AppDialog","OutText"):explode(",")
            if(appS("Name")!=""){switch(appS("Type")){
                case "number",  Paste[appS("Name"),number]=glbS("#AppDialog","OutText"):toNumber() break
                case "string",  Paste[appS("Name"),string]=glbS("#AppDialog","OutText") break
                case "vector",  Paste[appS("Name"),vector]=vec(Explode[1,string]:toNumber(),Explode[2,string]:toNumber(),Explode[3,string]:toNumber()) break
                case "vector2", Paste[appS("Name"),vector2]=vec2(Explode[1,string]:toNumber(),Explode[2,string]:toNumber()) break
                case "vector4", Paste[appS("Name"),vector4]=vec4(Explode[1,string]:toNumber(),Explode[2,string]:toNumber(),Explode[3,string]:toNumber(),Explode[4,string]:toNumber()) break
                case "angle",   Paste[appS("Name"),angle]=ang(Explode[1,string]:toNumber(),Explode[2,string]:toNumber(),Explode[3,string]:toNumber()) break
                case "entity",  Paste[appS("Name"),entity]=entity(glbS("#AppDialog","OutText"):toNumber()) break
                case "table",   Paste[appS("Name"),table]=table() break
                case "numberArray", foreach(I,N:string=Explode){Explode[I,number]=N:toNumber()} Paste[appS("Name"),array]=Explode break
                case "stringArray", Paste[appS("Name"),array]=Explode break
            }}
            appT("Field"+F+Lvl,Paste)
            Update="TableCMD Field"+F
        }
        
        if(appDialog("TableCMD Rename","Input",10,"Enter new name")){
            local Target=appT("Field"+F+Lvl)
            local Paste=appT("Field"+F+Lvl)
            local Name=glbS("#AppDialog","OutText")
            if(Name!=""){switch(appT("Field"+F+Lvl):typeids()[Choice,string]){
                case "n", Target[Name,number] = Target[Choice,number] break
                case "s", Target[Name,string] = Target[Choice,string] break
                case "v", Target[Name,vector] = Target[Choice,vector] break
                case "xv2", Target[Name,vector2] = Target[Choice,vector2] break
                case "xv4", Target[Name,vector4] = Target[Choice,vector4] break
                case "e", Target[Name,entity]= Target[Choice,entity] break
                case "a", Target[Name,angle] = Target[Choice,angle] break
                case "r", Target[Name,array] = Target[Choice,array]:clone() break
                case "t", Target[Name,table] = Target[Choice,table]:clone() break
                default, App_Dialog="TableCMD Can't rename" break
            }}
            appT("Field"+F+Lvl,Paste)
            Update="TableCMD Field"+F
            Target:remove(Choice)
        }
    }
    
}}}
