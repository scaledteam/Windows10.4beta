#
# Created by scaled
#

@name Illusion

if(app("Illusion")){
    if(appCreate()){
        appV2("Screen_Size",EGP_Size_Screen)
        
        appR("Dots", array(
            vec(-25, -25, -60),
            vec(-25,  25, -60),
            vec( 25,  25, -60),
            vec( 25, -25, -60),
            vec(-25, -25, -10),
            vec(-25,  25, -10),
            vec( 25,  25, -10),
            vec( 25, -25, -10)
        ))
        
        appR("Edg", array(
            vec2(1,2),
            vec2(2,3),
            vec2(3,4),
            vec2(4,1),
            
            vec2(5,6),
            vec2(6,7),
            vec2(7,8),
            vec2(8,5),
            
            vec2(1,5),
            vec2(2,6),
            vec2(3,7),
            vec2(4,8)
        ))
    }
    
    appEgpMemory(30)
    if(appGraphics(vec2(200),vec(32,128,64))){
        
        local Size = appV2("Size")
        appBox(1,vec2(0,7.5),Size-vec2(0,15),vec(50))
        appTextWhite(2,"by CornerPin",Size/2-vec2(0,10),10,2)
        for(I=1,appR("Edg"):count()){
            Screen:egpLine(EGP+I+7,vec2(),vec2())
            Screen:egpParent(EGP+I+7,EGP)
        }
    }else{
    
    if(appSize(3,vec2(150,100),vec2(200))){
        local Size = appV2("Size")
        Screen:egpSize(EGP+1,Size-vec2(0,15))
        Screen:egpPos(EGP+2,Size/2-vec2(0,10))
    }

    local Ply = User
    if(Ply){
        local Pos = array()
        local Size = appV2("Size")
        local Screen_Size = appV2("Screen_Size")
        local Scr = Screen:entity()
        #local Multiplier = Size:y() / Sys_Resolution:y() * 0.1
        local Multiplier = 0.2
        local Offset = vec(shift(Screen:egpPos(EGP)),0)/Sys_Resolution:y()*Screen_Size:y()+Scr:boxCenter()
        #local Offset = Scr:toLocal(Screen:egpToWorld(vec2()))
        
        local A = Scr:toWorld(Offset)
        foreach(I, P:vector = appR("Dots")){
            local Local = toLocal(rayPlaneIntersection(Ply:shootPos(), Scr:toWorld(P*Multiplier+Offset) - Ply:shootPos(), Scr:pos(), Scr:up()), ang(), A, Scr:angles())
            Pos:pushVector2(vec2(Local:y(), Local:x()) * Sys_Resolution:y() / Screen_Size:y())
        }
        local Local = toLocal(rayPlaneIntersection(Ply:shootPos(), Ply:aimPos() - Ply:shootPos(), Scr:pos(), Scr:up()), ang(), A, Scr:angles())
        Screen:egpCircle(EGP+7, clamp(vec2(Local:y(), Local:x()) * Sys_Resolution:y() / Screen_Size:y(),-Size/2+vec2(2,15+2),Size/2-vec2(2)), vec2(4))
        Screen:egpParent(EGP+7,EGP)
        foreach(I, P:vector2 = appR("Edg")){
            Screen:egpLine(EGP+I+7, clamp(Pos[P[1], vector2],-Size/2+vec2(0,15),Size/2), clamp(Pos[P[2], vector2],-Size/2+vec2(0,15),Size/2))
        }
    }
}}

